}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
list_out = list(phi.chain, acceptance)
names(list_out) = c("phi.chain", "acceptance_prob_univ")
return(list_out)
}
plot(MCMC.out$phi.chain, xlab = "Iteration", ylab = "phi", type = "l")
MCMC.out <- mh_phi(phi.init = 0.5, iters <- 5e3, burnin <- 1e3)
rm(list = ls())
set.seed(3019)
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.05 #rep(0.05,100)  #true value of phi
true_nu <- 1
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- matern(d, true_phi, true_nu) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
loglike_phi <- function(phi, Y){
nu <- 0.1
cov <- matern(d, phi, nu)
chol.cov <- chol(cov)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
loglike_phi <- function(phi, Y){
nu <- 1
cov <- matern(d, phi, nu)
chol.cov <- chol(cov)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.1)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
list_out = list(phi.chain, acceptance)
names(list_out) = c("phi.chain", "acceptance_prob_univ")
return(list_out)
}
MCMC.out <- mh_phi(phi.init = 0.5, iters <- 1e3, burnin <- 1e2)
rm(list = ls())
rm(list = ls())
rm(list = ls())
set.seed(3019)
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1 #rep(0.05,100)  #true value of phi
true_nu <- 0.5
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- matern(d, true_phi, true_nu) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
loglike_phi <- function(phi, Y){
nu <- 0.5
cov <- matern(d, phi, nu)
chol.cov <- chol(cov)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.1)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
list_out = list(phi.chain, acceptance)
names(list_out) = c("phi.chain", "acceptance_prob_univ")
return(list_out)
}
MCMC.out <- mh_phi(phi.init = 0.5, iters <- 1e2, burnin <- 1e2)
warnings()
rm(list = ls())
rm(list = ls())
rm(list = ls())
set.seed(3019)
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1 #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
loglike_phi <- function(phi, Y){
#nu <- 0.5
cov <- exp(-d/phi)
chol.cov <- chol(cov)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.1)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
list_out = list(phi.chain, acceptance)
names(list_out) = c("phi.chain", "acceptance_prob_univ")
return(list_out)
}
MCMC.out <- mh_phi(phi.init = 0.5, iters <- 1e2, burnin <- 1e2)
MCMC.out <- mh_phi(phi.init = 0.01, iters <- 1e2, burnin <- 1e2)
rm(list = ls())
set.seed(3019)
#Task 1 : Phi = 0.05
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1 #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
# MCMC Set up
loglike_phi <- function(phi, Y){
#nu <- 0.5
cov <- exp(-d/phi)
chol.cov <- chol(cov)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
chol.cov <- chol(cov)
prec <- chol2inv(chol.cov)
rm(list = ls())
set.seed(3019)
#Task 1 : Phi = 0.05
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1 #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
# MCMC Set up
loglike_phi <- function(phi, Y){
#nu <- 0.5
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
# Target
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
# Metropolis-Hastings Algorithm
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.05)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
list_out = list(phi.chain, acceptance)
names(list_out) = c("phi.chain", "acceptance_prob_univ")
return(list_out)
}
MCMC.out <- mh_phi(phi.init = 0.01, iters <- 1e2, burnin <- 1e2)
rm(list = ls())
set.seed(3019)
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1 #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
loglike_phi <- function(phi, Y){
#nu <- 0.5
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 0.2, log = T))
}
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.05)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
return(phi.chain)
}
MCMC.out <- mh_phi(phi.init = 0.2, iters <- 1e2, burnin <- 1e2)
plot(MCMC.out$phi.chain, xlab = "Iteration", ylab = "phi", type = "l")
rm(list = ls())
set.seed(3019)
#Task 1 : Phi = 0.05
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.05 #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
# MCMC Set up
loglike_phi <- function(phi, Y){
#nu <- 0.5
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
# Target
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 0.2, log = T))
}
# Metropolis-Hastings Algorithm
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.05)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
return(phi.chain)
}
MCMC.out <- mh_phi(phi.init = 0.2, iters <- 1e2, burnin <- 1e2)
loglike_phi <- function(phi, Y){
#nu <- 0.5
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
return(like.out)
}
loglike_phi(0.2, Y= Y)
# Target
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 0.2, log = T))
}
target_phi(0.2, Y)
target_phi(0.05, Y)
rm(list = ls())
set.seed(3019)
#Task 1 : Phi = 0.05
library(fields)
library(plot3D)
library(geoR)
N <- 5e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1  #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
loglike_phi <- function(phi, Y){
#nu <- 0.5
if(phi > 0){
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
}else{
like.out <- -Inf
}
return(like.out)
}
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.1)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
return(phi.chain)
}
MCMC.out <- mh_phi(phi.init = 0.2, iters <- 1e2, burnin <- 1e2)
plot(MCMC.out$phi.chain, xlab = "Iteration", ylab = "phi", type = "l")
plot(MCMC.out, xlab = "Iteration", ylab = "phi", type = "l")
rm(list = ls())
set.seed(3019)
#Task 1 : Phi = 0.05
library(fields)
library(plot3D)
library(geoR)
N <- 1e3 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1  #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
# MCMC Set up
loglike_phi <- function(phi, Y){
#nu <- 0.5
if(phi > 0){
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
}else{
like.out <- -Inf
}
return(like.out)
}
# Target
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
# Metropolis-Hastings Algorithm
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.1)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
return(phi.chain)
}
MCMC.out <- mh_phi(phi.init = 0.5, iters <- 5e3, burnin <- 1e3)
rm(list = ls())
set.seed(3019)
library(fields)
library(plot3D)
library(geoR)
N <- 1e3 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1  #rep(0.05,100)  #true value of phi
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
loglike_phi <- function(phi, Y){
#nu <- 0.5
if(phi > 0){
cov_mat <- exp(-d/phi)
chol.cov <- chol(cov_mat)
prec <- chol2inv(chol.cov)
like.out <-  -sum(log(diag(chol.cov))) - 0.5*sum((prec %*% Y) * Y)
}else{
like.out <- -Inf
}
return(like.out)
}
target_phi <- function(phi, Y){
return(loglike_phi(phi, Y) + dunif(phi, 0, 1, log = T))
}
mh_phi <- function(phi.init, iters, burnin){
phi.chain <- array(dim = c(iters + burnin, 1))
phi.chain[1] <- phi.init
for (i in 2:(iters + burnin))
{
proposal <- rnorm(n = 1, mean = phi.chain[i-1], sd = 0.1)
r = exp(target_phi(proposal, Y) - target_phi(phi.chain[i-1], Y))
acc_ratio = min(r,1)
if(runif(1) < acc_ratio){
phi.chain[i] = proposal
} else {
phi.chain[i] = phi.chain[i-1]
}
}
acceptance = 1 - mean(duplicated(phi.chain[-(1:burnin)]))
return(phi.chain)
}
MCMC.out <- mh_phi(phi.init = 0.5, iters <- 5e2, burnin <- 1e2)
p <- plot(MCMC.out, xlab = "Iteration", ylab = "phi", type = "l")
abline(h = true_phi, col = 'blue', lwd = 2)
par(mfrow = c(1, 2))
pdf("Output_plots.pdf", width = 4, height = 4)
rm(list = ls())
set.seed(3019)
mydir <- "C:/Users/Arghya/Documents/GitHub/Multi-Response-Spatial-GLMM"
setwd(mydir)
library(fields)
library(plot3D)
library(geoR)
N <- 2e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1  #rep(0.05,100)  #true value of phi
plot(loc)
mydir <- "C:/Users/Arghya/Documents/GitHub/Multi-Response-Spatial-GLMM"
setwd(mydir)
# Simulating with  Phi = 0.05
library(fields)
library(plot3D)
library(geoR)
N <- 2e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
true_phi <- 0.1  #rep(0.05,100)  #true value of phi
N <- 2e2 # No. of spatial locations
loc <- cbind(runif(N), runif(N)) #simulating 100 locations
plot(loc)
d <- rdist(loc) # Calculates the Euclidean distance matrix
cov <- exp(-d/true_phi) # Calculates the correlation matrix
Y <- c(t(chol(cov)) %*% rnorm(N)) # Draws a sample from multivariate normal
scatter2D(x = loc[ , 1], y = loc[ , 2], colvar = Y, pch = 15)
